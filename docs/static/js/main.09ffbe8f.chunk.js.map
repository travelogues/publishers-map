{"version":3,"sources":["map/Map.jsx","timeline/Timeline.jsx","App.js","index.js"],"names":["getBounds","geojson","bounds","bbox","slice","reverse","Map","data","timerange","allFeatures","features","filter","f","geometry","type","featuresToDisplay","min","max","properties","earliest","latest","getRadius","feature","works","records","map","r","year","y","length","num_works","Math","style","stroke","color","weight","opacity","fill","fillColor","fillOpacity","MapContainer","TileLayer","url","idx","CircleMarker","center","coordinates","radius","pathOptions","Popup","href","geonames_uri","placename","Timeline","props","useState","range","setRange","getLeftPct","className","left","draggableTrack","minValue","maxValue","value","onChange","sanitized","computeTimeline","years","reduce","acc","forEach","add","Set","Array","from","sort","App","useSWR","fetch","then","json","setTimerange","L","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","iconUrl","shadowUrl","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.09ffbe8f.chunk.js","sourcesContent":["import bbox from '@turf/bbox';\nimport { MapContainer, CircleMarker, Popup, TileLayer } from 'react-leaflet';\n\nimport 'leaflet/dist/leaflet.css';\n\nimport './Map.scss';\n\nconst getBounds = geojson => {\n  const bounds = bbox(geojson);\n  return [\n    bounds.slice(0, 2).slice().reverse(),\n    bounds.slice(2).slice().reverse()\n  ];\n}\n\nconst Map = ({ data, timerange }) => {\n\n  const allFeatures = data?.features.filter(f => f?.geometry.type === 'Point');\n\n  const featuresToDisplay = timerange ? allFeatures.filter(f => {\n    const { min, max } = timerange;\n    const { earliest, latest } = f.properties;\n    return earliest <= max && latest >= min; \n  }) : allFeatures;\n\n  // TODO make min/max scale dynamic, based on the values in the data\n  const getRadius = feature => {\n    const works = timerange ? feature.records\n      .map(r => r.year)\n      .filter(y => y >= timerange.min && y <= timerange.max).length : feature.properties.num_works;\n\n    return Math.max(5, works / 2.5);\n  }\n\n  const style = {\n    stroke: true,\n    color: '#000',\n    weight: 2,\n    opacity: 1,\n    fill: true,\n    fillColor: '#fff',\n    fillOpacity: 1\n  }\n\n  return (\n    <>\n      { featuresToDisplay &&\n        <MapContainer bounds={getBounds(data)}>\n          <TileLayer url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\" />\n\n          { featuresToDisplay.map((f, idx) =>\n            <CircleMarker \n              key={idx} \n              center={f.geometry.coordinates.slice().reverse()}\n              radius={getRadius(f)}\n              pathOptions={style}>\n              <Popup>\n                <a href={f.properties.geonames_uri}>{f.properties.placename}</a> <br/>\n                {f.properties.num_works} works\n              </Popup>\n            </CircleMarker>\n          )}\n        </MapContainer>\n      }\n    </>\n  )\n\n}\n\nexport default Map;","// Cf. https://github.com/davidchin/react-input-range\nimport InputRange from 'react-input-range';\nimport { useState } from 'react';\n\nimport './Timeline.scss';\n\nimport 'react-input-range/lib/css/index.css';\n\nconst Timeline = props => {\n  \n  // Start and end years\n  const min = props.data[0];\n  const max = props.data[props.data.length - 1];\n\n  const [ range, setRange ] = useState({ min, max});\n\n  const getLeftPct = year =>\n    100 * ((year - min) / (max - min))\n\n  const onChange = value => {\n    const sanitized = {\n      min: Math.max(min, value.min),\n      max: Math.min(max, value.max)\n    };\n\n    setRange(sanitized);\n    props.onChange(value);\n  }\n\n  return (\n    <div className=\"t6e-timeline\">\n      <div className=\"t6e-timeline-inner\">\n        <div className=\"t6e-ticks\">\n          { props.data.map(year =>\n            <div key={year} className=\"t6e-tick-wrapper\" style={{ left: `${getLeftPct(year)}%` }}>\n              <div className=\"t6e-tick\" />\n            </div>\n          )}\n        </div>\n        <InputRange\n          draggableTrack\n          minValue={min}\n          maxValue={max}\n          value={range}\n          onChange={onChange} />\n      </div>\n    </div>\n  )\n\n}\n\nexport default Timeline;","import { useState } from 'react';\nimport Map from './map/Map';\nimport useSWR from 'swr';\nimport Timeline from './timeline/Timeline';\n\nimport './App.css';\n\nconst computeTimeline = data => {\n  const reducer = (acc, feature) => {\n    feature.records.forEach(r => acc.add(r.year));\n    return acc;\n  }\n\n  const years = data.features.reduce(reducer, new Set());\n\n  // To array and sort\n  return [ ...Array.from(years).slice().sort() ];\n}\n\nconst App = () => {\n\n  const { data } = useSWR('/map.json', url => fetch(url).then(r => r.json()));\n\n  const [ timerange, setTimerange ] = useState();\n\n  const onChange = range =>\n    setTimerange(range);\n\n  return (\n    <div className=\"App\">\n      <Map data={data} timerange={timerange} />\n      { data && \n        <Timeline data={computeTimeline(data)} onChange={onChange} />\n      }\n    </div>\n  );\n\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\nimport L from 'leaflet';\n\n// Fix missing Leaflet marker images\n// Cf. https://github.com/PaulLeCam/react-leaflet/issues/453\ndelete L.Icon.Default.prototype._getIconUrl;\n\nL.Icon.Default.mergeOptions({\n    iconRetinaUrl: 'images/leaflet/marker-icon-2x.png',\n    iconUrl: 'images/leaflet/marker-icon.png',\n    shadowUrl: 'images/leaflet/marker-shadow.png'\n});\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}