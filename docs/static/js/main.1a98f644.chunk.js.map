{"version":3,"sources":["map/Legend.jsx","map/Map.jsx","timeline/Timeline.jsx","App.js","index.js"],"names":["Legend","className","getBounds","geojson","bounds","bbox","slice","reverse","Map","data","timerange","allFeatures","features","filter","f","geometry","type","featuresToDisplay","min","max","properties","earliest","latest","getRadius","feature","works","records","map","r","year","y","length","num_works","Math","isOrient","worksInRange","w","Set","reduce","acc","concat","markers","getMarkersInRange","has","MapContainer","preferCanvas","TileLayer","url","idx","CircleMarker","center","coordinates","radius","pathOptions","stroke","color","weight","opacity","fill","fillColor","fillOpacity","Popup","href","geonames_uri","placename","Timeline","props","useState","range","setRange","getLeftPct","style","left","draggableTrack","minValue","maxValue","value","onChange","sanitized","computeTimeline","years","forEach","add","Array","from","sort","App","useSWR","fetch","then","json","setTimerange","L","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","iconUrl","shadowUrl","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1a98f644.chunk.js","sourcesContent":["const Legend = () => {\n\n  return (\n    <div className=\"map-legend\">\n      <table>\n        <tbody>\n          <tr>\n            <td>\n              <span className=\"dot orient\"></span>\n            </td>\n            <td>\n              <label>Travelogues on the Orient</label>\n            </td>\n          </tr>\n\n          <tr>\n            <td>\n              <span className=\"dot non-orient\"></span>\n            </td>\n            <td>\n              <label>No Travelogues on the Orient</label>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  )\n\n}\n\nexport default Legend;","import bbox from '@turf/bbox';\nimport { MapContainer, CircleMarker, Popup, TileLayer } from 'react-leaflet';\nimport Legend from './Legend';\n\nimport 'leaflet/dist/leaflet.css';\n\nimport './Map.scss';\n\n\nconst getBounds = geojson => {\n  const bounds = bbox(geojson);\n  return [\n    bounds.slice(0, 2).slice().reverse(),\n    bounds.slice(2).slice().reverse()\n  ];\n}\n\nconst Map = ({ data, timerange }) => {\n\n  const allFeatures = data?.features.filter(f => f?.geometry.type === 'Point');\n\n  const featuresToDisplay = timerange ? allFeatures.filter(f => {\n    const { min, max } = timerange;\n    const { earliest, latest } = f.properties;\n    return earliest <= max && latest >= min; \n  }) : allFeatures;\n\n  // TODO make min/max scale dynamic, based on the values in the data\n  const getRadius = feature => {\n    const works = timerange ? feature.records\n      .map(r => r.year)\n      .filter(y => y >= timerange.min && y <= timerange.max).length : feature.properties.num_works;\n\n    return Math.max(5, works / 2.5);\n  }\n\n  const isOrient = feature => {\n    // Helper: extracts the markers for works in the current range\n    const getMarkersInRange = feature => {\n      const worksInRange = feature.records.filter(w => w.year >= timerange.min && w.year <= timerange.max);\n      return new Set(worksInRange.reduce((acc, w) => acc.concat(w.markers), []));\n    }\n\n    const markers = timerange ? getMarkersInRange(feature) :\n      new Set(feature.records.reduce((acc, f) => acc.concat(f.markers), []));\n\n    return markers.has('Orient');\n  }\n\n  const getStyle = feature => ({\n    stroke: true,\n    color: '#000',\n    weight: 1.5,\n    opacity: 1,\n    fill: true,\n    fillColor: isOrient(feature) ? '#ff9a1e' : '#b7b7b7',\n    fillOpacity: 1\n  });\n\n  return (\n    <>\n      { featuresToDisplay &&\n        <>\n          <MapContainer bounds={getBounds(data)} preferCanvas={true}>\n            <TileLayer url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\" />\n\n            { featuresToDisplay.map((f, idx) =>\n              <CircleMarker \n                key={idx} \n                center={f.geometry.coordinates.slice().reverse()}\n                radius={getRadius(f)}\n                pathOptions={getStyle(f)}>\n                <Popup>\n                  <a href={f.properties.geonames_uri}>{f.properties.placename}</a> <br/>\n                  {f.properties.num_works} works\n                </Popup>\n              </CircleMarker>\n            )}\n          </MapContainer>\n\n          <Legend />\n        </>\n      }\n    </>\n  )\n\n}\n\nexport default Map;","// Cf. https://github.com/davidchin/react-input-range\nimport InputRange from 'react-input-range';\nimport { useState } from 'react';\n\nimport './Timeline.scss';\n\nimport 'react-input-range/lib/css/index.css';\n\nconst Timeline = props => {\n  \n  // Start and end years\n  const min = props.data[0];\n  const max = props.data[props.data.length - 1];\n\n  const [ range, setRange ] = useState({ min, max});\n\n  const getLeftPct = year =>\n    100 * ((year - min) / (max - min))\n\n  const onChange = value => {\n    const sanitized = {\n      min: Math.max(min, value.min),\n      max: Math.min(max, value.max)\n    };\n\n    setRange(sanitized);\n    props.onChange(value);\n  }\n\n  return (\n    <div className=\"t6e-timeline\">\n      <div className=\"t6e-timeline-inner\">\n        <div className=\"t6e-ticks\">\n          { props.data.map(year =>\n            <div key={year} className=\"t6e-tick-wrapper\" style={{ left: `${getLeftPct(year)}%` }}>\n              <div className=\"t6e-tick\" />\n            </div>\n          )}\n        </div>\n        <InputRange\n          draggableTrack\n          minValue={min}\n          maxValue={max}\n          value={range}\n          onChange={onChange} />\n      </div>\n    </div>\n  )\n\n}\n\nexport default Timeline;","import { useState } from 'react';\nimport Map from './map/Map';\nimport useSWR from 'swr';\nimport Timeline from './timeline/Timeline';\n\nimport './App.css';\n\nconst computeTimeline = data => {\n  const reducer = (acc, feature) => {\n    feature.records.forEach(r => acc.add(r.year));\n    return acc;\n  }\n\n  const years = data.features.reduce(reducer, new Set());\n\n  // To array and sort\n  return [ ...Array.from(years).slice().sort() ];\n}\n\nconst App = () => {\n\n  const { data } = useSWR('map.json', url => fetch(url).then(r => r.json()));\n\n  const [ timerange, setTimerange ] = useState();\n\n  const onChange = range =>\n    setTimerange(range);\n\n  return (\n    <div className=\"App\">\n      <Map data={data} timerange={timerange} />\n      { data && \n        <Timeline data={computeTimeline(data)} onChange={onChange} />\n      }\n    </div>\n  );\n\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\nimport L from 'leaflet';\n\n// Fix missing Leaflet marker images\n// Cf. https://github.com/PaulLeCam/react-leaflet/issues/453\ndelete L.Icon.Default.prototype._getIconUrl;\n\nL.Icon.Default.mergeOptions({\n    iconRetinaUrl: 'images/leaflet/marker-icon-2x.png',\n    iconUrl: 'images/leaflet/marker-icon.png',\n    shadowUrl: 'images/leaflet/marker-shadow.png'\n});\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}