{"version":3,"sources":["map/Legend.jsx","map/Map.jsx","timeline/Timeline.jsx","FeatureIndex.js","App.js","index.js"],"names":["Legend","props","className","selected","onClick","onSelect","index","markers","map","marker","STYLE_OUTER","stroke","color","weight","opacity","fill","fillColor","fillOpacity","STYLE_INNER","getBounds","geojson","bounds","bbox","slice","reverse","Map","data","timerange","useState","selectedMarker","setSelectedMarker","allFeatures","features","filter","f","geometry","type","featuresToDisplay","min","max","records","r","year","length","MapContainer","preferCanvas","TileLayer","url","feature","allWorks","worksWithMarker","includes","outerRadius","Math","innerRadius","popup","Popup","href","properties","geonames_uri","placename","getFeatureInfo","Fragment","CircleMarker","center","coordinates","radius","pathOptions","Timeline","range","setRange","getLeftPct","style","left","draggableTrack","minValue","maxValue","value","onChange","sanitized","FeatureIndex","findByMarker","_byMarker","byMarker","forEach","Array","from","reduce","acc","work","add","Set","featuresWithMarker","push","this","_features","Object","keys","sort","computeTimeline","years","App","useSWR","fetch","then","json","setTimerange","L","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","iconUrl","shadowUrl","ReactDOM","render","document","getElementById"],"mappings":"yRAqCeA,EArCA,SAAAC,GAEb,OACE,qBAAKC,UAAU,aAAf,SACE,gCACE,kCACE,qBACEA,UAA6B,MAAlBD,EAAME,SAAmB,WAAa,KACjDC,QAAS,kBAAMH,EAAMI,YAFvB,UAGE,6BACE,sBAAMH,UAAU,UAElB,6BACE,mDAIFD,EAAMK,MAAMC,QAAQC,KAAI,SAAAC,GAAM,OAC9B,qBAEEP,UAAWD,EAAME,WAAaM,EAAS,WAAa,KACpDL,QAAS,kBAAMH,EAAMI,SAASI,IAHhC,UAIE,6BACE,sBAAMP,UAAU,UAElB,6BACE,gCAAQO,QAPLA,cCVbC,G,YAAc,CAClBC,QAAQ,EACRC,MAAO,UACPC,OAAQ,IACRC,QAAS,EACTC,MAAM,EACNC,UAAW,UACXC,YAAa,IAGTC,EAAW,2BAAOR,GAAP,IACfE,MAAO,UACPI,UAAW,YAKPG,EAAY,SAAAC,GAChB,IAAMC,EAASC,YAAKF,GACpB,MAAO,CACLC,EAAOE,MAAM,EAAG,GAAGA,QAAQC,UAC3BH,EAAOE,MAAM,GAAGA,QAAQC,YAyGbC,EArGH,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMpB,EAAuB,EAAvBA,MAAOqB,EAAgB,EAAhBA,UAAgB,EAEIC,qBAFJ,mBAElCC,EAFkC,KAElBC,EAFkB,KAIpCC,EAAW,OAAGL,QAAH,IAAGA,OAAH,EAAGA,EAAMM,SAASC,QAAO,SAAAC,GAAC,MAAyB,WAApB,OAADA,QAAC,IAADA,OAAA,EAAAA,EAAGC,SAASC,SAErDC,EAAoBV,EAAYI,EAAYE,QAAO,SAAAC,GAAM,IACrDI,EAAaX,EAAbW,IAAKC,EAAQZ,EAARY,IAKb,OAHqBL,EAAEM,QACpBP,QAAO,SAAAQ,GAAC,OAAIA,EAAEC,MAAQJ,GAAOG,EAAEC,MAAQH,KAEtBI,OAAS,KAC1BZ,EAwCL,OACE,mCACIM,GACA,qCACE,eAACO,EAAA,EAAD,CAAcvB,OAAQF,EAAUO,GAAOmB,cAAc,EAArD,UACE,cAACC,EAAA,EAAD,CAAWC,IAAI,kGAEbV,EAAkB7B,KAAI,SAAA0B,GAAM,IAAD,EAhChB,SAAAc,GACrB,IAAMC,EAAWtB,EAAYqB,EAAQR,QAClCP,QAAO,SAAAQ,GAAC,OAAIA,EAAEC,MAAQf,EAAUW,KAAOG,EAAEC,MAAQf,EAAUY,OAAOS,EAAQR,QAEvEU,EAAkBrB,EACtBoB,EAAShB,QAAO,SAAAQ,GAAC,OAAIA,EAAElC,QAAQ4C,SAAStB,MAAmBoB,EAiB7D,MAAO,CAAEG,YAfWC,KAAKd,IA7CL,EA6C0BU,EAASN,OAAS,KAe1CW,YAdFJ,EAAgBP,OAAS,EAAIU,KAAKd,IA9ClC,EA8CuDW,EAAgBP,OAAS,KAAO,EAcxEY,MAXjC,eAACC,EAAA,EAAD,WACE,6BAAI,mBAAGC,KAAMT,EAAQU,WAAWC,aAA5B,SAA2CX,EAAQU,WAAWE,cAChE/B,EACA,qCACE,8BAAIqB,EAAgBP,OAApB,WAAoCd,EAApC,OACA,8BAAIoB,EAASN,OAAb,qBAEF,8BAAIM,EAASN,OAAb,gBAegDkB,CAAe3B,GAAnDkB,EADmB,EACnBA,YAAaE,EADM,EACNA,YAAaC,EADP,EACOA,MAClC,OACE,eAAC,IAAMO,SAAP,WACE,cAACC,EAAA,EAAD,CAEEC,OAAQ9B,EAAEC,SAAS8B,YAAY1C,QAAQC,UACvC0C,OAAQd,EACRe,YAAazD,EAJf,SAMG6C,GANH,UACUrB,EAAEwB,WAAWE,UADvB,WAUE/B,GAAkByB,EAAc,GAChC,cAACS,EAAA,EAAD,CAEEC,OAAQ9B,EAAEC,SAAS8B,YAAY1C,QAAQC,UACvC0C,OAAQZ,EACRa,YAAajD,EAJf,SAMIqC,GANJ,UACUrB,EAAEwB,WAAWE,UADvB,aAZiB1B,EAAEwB,WAAWE,iBA2BxC,cAAC,EAAD,CACEtD,MAAOA,EACPH,SAAU0B,EACVxB,SAAU,SAAAI,GAAM,OAAIqB,EAAkBrB,Y,iBC5EnC2D,G,YA3CE,SAAAnE,GAGf,IAAMqC,EAAMrC,EAAMyB,KAAK,GACjBa,EAAMtC,EAAMyB,KAAKzB,EAAMyB,KAAKiB,OAAS,GAJnB,EAMIf,mBAAS,CAAEU,MAAKC,QANpB,mBAMhB8B,EANgB,KAMTC,EANS,KAQlBC,EAAa,SAAA7B,GAAI,OACbA,EAAOJ,IAAQC,EAAMD,GAA7B,KAYF,OACE,qBAAKpC,UAAU,eAAf,SACE,sBAAKA,UAAU,qBAAf,UACE,qBAAKA,UAAU,YAAf,SACID,EAAMyB,KAAKlB,KAAI,SAAAkC,GAAI,OACnB,qBAAgBxC,UAAU,mBAAmBsE,MAAO,CAAEC,KAAK,GAAD,OAAKF,EAAW7B,GAAhB,MAA1D,SACE,qBAAKxC,UAAU,cADPwC,QAKd,cAAC,IAAD,CACEgC,gBAAc,EACdC,SAAUrC,EACVsC,SAAUrC,EACVsC,MAAOR,EACPS,SAzBS,SAAAD,GACf,IAAME,EAAY,CAChBzC,IAAKe,KAAKd,IAAID,EAAKuC,EAAMvC,KACzBC,IAAKc,KAAKf,IAAIC,EAAKsC,EAAMtC,MAG3B+B,EAASS,GACT9E,EAAM6E,SAASD,a,gBCdEG,E,WAEnB,WAAY5D,GAAU,IAAD,gCA+BrB6D,aAAe,SAAAxE,GAAM,OACnB,EAAKyE,UAAUzE,IA/Bf,IAAMuB,EAAWZ,EAAQY,SAASC,QAAO,SAAAC,GAAC,MAAyB,WAApB,OAADA,QAAC,IAADA,OAAA,EAAAA,EAAGC,SAASC,SAGpD+C,EAAW,GAEjBnD,EAASoD,SAAQ,SAAAlD,GAhBF,IAAAc,KAiBFd,EAhBfmD,MAAMC,KACJtC,EAAQR,QAAQ+C,QAAO,SAACC,EAAKC,GAE3B,OADAA,EAAKlF,QAAQ6E,SAAQ,SAAA3E,GAAM,OAAI+E,EAAIE,IAAIjF,MAChC+E,IACN,IAAIG,OAYSP,SAAQ,SAAA3E,GACpB,IAAMmF,EAAqBT,EAAS1E,GAChCmF,EACFA,EAAmBC,KAAK3D,GAExBiD,EAAS1E,GAAU,CAAEyB,SAK3B4D,KAAKC,UAAY/D,EACjB8D,KAAKZ,UAAYC,E,0CAGnB,WACE,OAAOW,KAAKC,Y,mBAGd,WACE,OAAOC,OAAOC,KAAKH,KAAKZ,WAAW3D,QAAQ2E,W,KChCzCC,G,MAAkB,SAAAzE,GACtB,IAKM0E,EAAQ1E,EAAKM,SAASuD,QALZ,SAACC,EAAKxC,GAEpB,OADAA,EAAQR,QAAQ4C,SAAQ,SAAA3C,GAAC,OAAI+C,EAAIE,IAAIjD,EAAEC,SAChC8C,IAGmC,IAAIG,KAGhD,OAAO,YAAKN,MAAMC,KAAKc,GAAO7E,QAAQ2E,UAyBzBG,EAtBH,WAAO,IAET3E,EAAS4E,YAAO,YAAY,SAAAvD,GAAG,OAAIwD,MAAMxD,GAAKyD,MAAK,SAAA/D,GAAC,OAAIA,EAAEgE,aAA1D/E,KAFQ,EAIoBE,qBAJpB,mBAIRD,EAJQ,KAIG+E,EAJH,KAMVpG,EAAQoB,EAAO,IAAIsD,EAAatD,GAAQ,KAK9C,OACE,sBAAKxB,UAAU,MAAf,UACE,cAAC,EAAD,CAAKwB,KAAMA,EAAMpB,MAAOA,EAAOqB,UAAWA,IACxCD,GACA,cAAC,EAAD,CAAUA,KAAMyE,EAAgBzE,GAAOoD,SAP5B,SAAAT,GAAK,OACpBqC,EAAarC,U,uBCvBVsC,IAAEC,KAAKC,QAAQC,UAAUC,YAEhCJ,IAAEC,KAAKC,QAAQG,aAAa,CACxBC,cAAe,oCACfC,QAAS,iCACTC,UAAW,qCAGfC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.4310c822.chunk.js","sourcesContent":["const Legend = props => {\n\n  return (\n    <div className=\"map-legend\">\n      <table>\n        <tbody>\n          <tr\n            className={props.selected == null ? 'selected' : null} \n            onClick={() => props.onSelect()}>\n            <td>\n              <span className=\"dot\"></span>\n            </td>\n            <td>\n              <label>All works</label>\n            </td>\n          </tr>\n\n          { props.index.markers.map(marker => \n            <tr \n              key={marker} \n              className={props.selected === marker ? 'selected' : null}\n              onClick={() => props.onSelect(marker)}>\n              <td>\n                <span className=\"dot\"></span>\n              </td>\n              <td>\n                <label>{marker}</label>\n              </td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n    </div>\n  )\n\n}\n\nexport default Legend;","import React, { useState } from 'react';\nimport bbox from '@turf/bbox';\nimport { MapContainer, CircleMarker, Popup, TileLayer } from 'react-leaflet';\nimport Legend from './Legend';\n\nimport 'leaflet/dist/leaflet.css';\n\nimport './Map.scss';\n\nconst STYLE_OUTER = {\n  stroke: true,\n  color: '#4e4e4e',\n  weight: 1.5,\n  opacity: 1,\n  fill: true,\n  fillColor: '#b7b7b7',\n  fillOpacity: 1\n};\n\nconst STYLE_INNER = {...STYLE_OUTER, \n  color: '#bf7814',\n  fillColor: '#ff9a1e' \n};\n\nconst MIN_MARKER_SIZE = 5;\n\nconst getBounds = geojson => {\n  const bounds = bbox(geojson);\n  return [\n    bounds.slice(0, 2).slice().reverse(),\n    bounds.slice(2).slice().reverse()\n  ];\n}\n\nconst Map = ({ data, index, timerange }) => {\n\n  const [ selectedMarker, setSelectedMarker ] = useState();\n\n  const allFeatures = data?.features.filter(f => f?.geometry.type === 'Point');\n\n  const featuresToDisplay = timerange ? allFeatures.filter(f => {\n    const { min, max } = timerange;\n\n    const worksInRange = f.records\n      .filter(r => r.year >= min && r.year <= max);\n  \n    return worksInRange.length > 0; \n  }) : allFeatures;\n\n  const hasSelectedMarker = feature => {\n    const getMarkersInRange = feature => {\n      const worksInRange = feature.records.filter(w => w.year >= timerange.min && w.year <= timerange.max);\n      return new Set(worksInRange.reduce((acc, w) => acc.concat(w.markers), []));\n    }\n\n    const markers = timerange ? getMarkersInRange(feature) :\n      new Set(feature.records.reduce((acc, f) => acc.concat(f.markers), []));\n\n    return markers.has(selectedMarker);\n  }\n\n  // TODO make min/max scale dynamic, based on the values in the data\n  const getFeatureInfo = feature => {\n    const allWorks = timerange ? feature.records\n      .filter(r => r.year >= timerange.min && r.year <= timerange.max) : feature.records;\n\n    const worksWithMarker = selectedMarker ? \n      allWorks.filter(r => r.markers.includes(selectedMarker)) : allWorks;\n\n    const outerRadius = Math.max(MIN_MARKER_SIZE, allWorks.length / 2.5);\n    const innerRadius = worksWithMarker.length > 0 ? Math.max(MIN_MARKER_SIZE, worksWithMarker.length / 2.5) : 0;\n    \n    const popup = \n      <Popup>\n        <h1><a href={feature.properties.geonames_uri}>{feature.properties.placename}</a></h1>\n        { selectedMarker  ?\n          <>\n            <p>{worksWithMarker.length} works '{selectedMarker}'</p>\n            <p>{allWorks.length} works total</p>\n          </> : \n          <p>{allWorks.length} works</p>\n        }\n      </Popup>\n\n    return { outerRadius, innerRadius, popup };\n  }\n\n  return (\n    <>\n      { featuresToDisplay &&\n        <>\n          <MapContainer bounds={getBounds(data)} preferCanvas={true}>\n            <TileLayer url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\" />\n\n            { featuresToDisplay.map(f => {\n              const { outerRadius, innerRadius, popup } = getFeatureInfo(f);\n              return (\n                <React.Fragment key={f.properties.placename}>\n                  <CircleMarker\n                    key={`${f.properties.placename}-outer`}\n                    center={f.geometry.coordinates.slice().reverse()}\n                    radius={outerRadius}\n                    pathOptions={STYLE_OUTER}>\n                    \n                    {popup}\n\n                  </CircleMarker>\n\n                  { selectedMarker && innerRadius > 0 && \n                    <CircleMarker \n                      key={`${f.properties.placename}-inner`} \n                      center={f.geometry.coordinates.slice().reverse()}\n                      radius={innerRadius}\n                      pathOptions={STYLE_INNER}>\n                      \n                      { popup }\n\n                    </CircleMarker>\n                  }\n                </React.Fragment>\n              )\n            })}\n          </MapContainer>\n\n          <Legend\n            index={index} \n            selected={selectedMarker}\n            onSelect={marker => setSelectedMarker(marker) }/>\n        </>\n      }\n    </>\n  )\n\n}\n\nexport default Map;","// Cf. https://github.com/davidchin/react-input-range\nimport InputRange from 'react-input-range';\nimport { useState } from 'react';\n\nimport './Timeline.scss';\n\nimport 'react-input-range/lib/css/index.css';\n\nconst Timeline = props => {\n  \n  // Start and end years\n  const min = props.data[0];\n  const max = props.data[props.data.length - 1];\n\n  const [ range, setRange ] = useState({ min, max});\n\n  const getLeftPct = year =>\n    100 * ((year - min) / (max - min))\n\n  const onChange = value => {\n    const sanitized = {\n      min: Math.max(min, value.min),\n      max: Math.min(max, value.max)\n    };\n\n    setRange(sanitized);\n    props.onChange(value);\n  }\n\n  return (\n    <div className=\"t6e-timeline\">\n      <div className=\"t6e-timeline-inner\">\n        <div className=\"t6e-ticks\">\n          { props.data.map(year =>\n            <div key={year} className=\"t6e-tick-wrapper\" style={{ left: `${getLeftPct(year)}%` }}>\n              <div className=\"t6e-tick\" />\n            </div>\n          )}\n        </div>\n        <InputRange\n          draggableTrack\n          minValue={min}\n          maxValue={max}\n          value={range}\n          onChange={onChange} />\n      </div>\n    </div>\n  )\n\n}\n\nexport default Timeline;","/** \n * Returns the list of distinct markers from all \n * works at this feature.\n */\nconst getMarkers = feature =>\n  Array.from(\n    feature.records.reduce((acc, work) => {\n      work.markers.forEach(marker => acc.add(marker));\n      return acc;\n    }, new Set())\n  );\n\nexport default class FeatureIndex {\n\n  constructor(geojson) {\n    const features = geojson.features.filter(f => f?.geometry.type === 'Point');\n\n    // For later optimizations: index features by metadata marker\n    const byMarker = {};\n\n    features.forEach(f => {\n      getMarkers(f).forEach(marker => {\n        const featuresWithMarker = byMarker[marker];\n        if (featuresWithMarker) {\n          featuresWithMarker.push(f);\n        } else {\n          byMarker[marker] = [ f ];\n        }\n      })\n    });\n\n    this._features = features;\n    this._byMarker = byMarker;\n  }\n\n  get features() {\n    return this._features;\n  } \n\n  get markers() {\n    return Object.keys(this._byMarker).slice().sort();\n\n  }\n  \n  /** Returns all features with the given marker **/\n  findByMarker = marker =>\n    this._byMarker[marker];\n\n}","import { useState } from 'react';\nimport useSWR from 'swr';\nimport Map from './map/Map';\nimport Timeline from './timeline/Timeline';\nimport FeatureIndex from './FeatureIndex';\n\nimport './App.css';\n\nconst computeTimeline = data => {\n  const reducer = (acc, feature) => {\n    feature.records.forEach(r => acc.add(r.year));\n    return acc;\n  }\n\n  const years = data.features.reduce(reducer, new Set());\n\n  // To array and sort\n  return [ ...Array.from(years).slice().sort() ];\n}\n\nconst App = () => {\n\n  const { data } = useSWR('map.json', url => fetch(url).then(r => r.json()));\n\n  const [ timerange, setTimerange ] = useState();\n\n  const index = data ? new FeatureIndex(data) : null;\n\n  const onChange = range =>\n    setTimerange(range);\n\n  return (\n    <div className=\"App\">\n      <Map data={data} index={index} timerange={timerange} />\n      { data && \n        <Timeline data={computeTimeline(data)} onChange={onChange} />\n      }\n    </div>\n  );\n\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\nimport L from 'leaflet';\n\n// Fix missing Leaflet marker images\n// Cf. https://github.com/PaulLeCam/react-leaflet/issues/453\ndelete L.Icon.Default.prototype._getIconUrl;\n\nL.Icon.Default.mergeOptions({\n    iconRetinaUrl: 'images/leaflet/marker-icon-2x.png',\n    iconUrl: 'images/leaflet/marker-icon.png',\n    shadowUrl: 'images/leaflet/marker-shadow.png'\n});\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}