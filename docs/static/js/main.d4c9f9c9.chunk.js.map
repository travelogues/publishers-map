{"version":3,"sources":["map/Legend.jsx","map/Map.jsx","timeline/Timeline.jsx","FeatureIndex.js","App.js","index.js"],"names":["Legend","props","className","selected","onClick","onSelect","index","markers","map","marker","STYLE_OUTER","stroke","color","weight","opacity","fill","fillColor","fillOpacity","STYLE_INNER","getBounds","geojson","bounds","bbox","slice","reverse","Map","data","timerange","useState","selectedMarker","setSelectedMarker","allFeatures","features","filter","f","geometry","type","featuresToDisplay","min","max","properties","earliest","latest","MapContainer","preferCanvas","TileLayer","url","idx","feature","allWorks","records","r","year","worksWithMarker","includes","outer","Math","length","inner","getRadius","CircleMarker","center","coordinates","radius","pathOptions","Popup","href","geonames_uri","placename","num_works","Timeline","range","setRange","getLeftPct","style","left","draggableTrack","minValue","maxValue","value","onChange","sanitized","FeatureIndex","findByMarker","_byMarker","byMarker","forEach","Array","from","reduce","acc","work","add","Set","featuresWithMarker","push","this","_features","Object","keys","sort","computeTimeline","years","App","useSWR","fetch","then","json","setTimerange","L","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","iconUrl","shadowUrl","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d4c9f9c9.chunk.js","sourcesContent":["const Legend = props => {\n\n  return (\n    <div className=\"map-legend\">\n      <table>\n        <tbody>\n          <tr\n            className={!props.selected && 'selected'} \n            onClick={() => props.onSelect()}>\n            <td>\n              <span className=\"dot orient\"></span>\n            </td>\n            <td>\n              <label>All works</label>\n            </td>\n          </tr>\n\n          { props.index.markers.map(marker => \n            <tr \n              key={marker} \n              className={props.selected === marker && 'selected'}\n              onClick={() => props.onSelect(marker)}>\n              <td>\n                <span className=\"dot non-orient\"></span>\n              </td>\n              <td>\n                <label>{marker}</label>\n              </td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n    </div>\n  )\n\n}\n\nexport default Legend;","import { useState } from 'react';\nimport bbox from '@turf/bbox';\nimport { MapContainer, CircleMarker, Popup, TileLayer } from 'react-leaflet';\nimport Legend from './Legend';\n\nimport 'leaflet/dist/leaflet.css';\n\nimport './Map.scss';\n\nconst STYLE_OUTER = {\n  stroke: true,\n  color: '#4e4e4e',\n  weight: 1.5,\n  opacity: 1,\n  fill: true,\n  fillColor: '#b7b7b7',\n  fillOpacity: 1\n};\n\nconst STYLE_INNER = {...STYLE_OUTER, \n  color: '#bf7814',\n  fillColor: '#ff9a1e' \n};\n\nconst getBounds = geojson => {\n  const bounds = bbox(geojson);\n  return [\n    bounds.slice(0, 2).slice().reverse(),\n    bounds.slice(2).slice().reverse()\n  ];\n}\n\nconst Map = ({ data, index, timerange }) => {\n\n  const [ selectedMarker, setSelectedMarker ] = useState();\n\n  const allFeatures = data?.features.filter(f => f?.geometry.type === 'Point');\n\n  const featuresToDisplay = timerange ? allFeatures.filter(f => {\n    const { min, max } = timerange;\n    const { earliest, latest } = f.properties;\n    return earliest <= max && latest >= min; \n  }) : allFeatures;\n\n  const hasSelectedMarker = feature => {\n    const getMarkersInRange = feature => {\n      const worksInRange = feature.records.filter(w => w.year >= timerange.min && w.year <= timerange.max);\n      return new Set(worksInRange.reduce((acc, w) => acc.concat(w.markers), []));\n    }\n\n    const markers = timerange ? getMarkersInRange(feature) :\n      new Set(feature.records.reduce((acc, f) => acc.concat(f.markers), []));\n\n    return markers.has(selectedMarker);\n  }\n\n  // TODO make min/max scale dynamic, based on the values in the data\n  const getRadius = feature => {\n    const allWorks = timerange ? feature.records\n      .filter(r => r.year >= timerange.min && r.year <= timerange.max) : feature.records;\n\n    const worksWithMarker = selectedMarker ? \n      allWorks.filter(r => r.markers.includes(selectedMarker)) : allWorks;\n\n    const outer = Math.max(5, allWorks.length / 2.5);\n    const inner = worksWithMarker.length / 2.5;\n    \n    return { outer, inner };\n  }\n\n  return (\n    <>\n      { featuresToDisplay &&\n        <>\n          <MapContainer bounds={getBounds(data)} preferCanvas={true}>\n            <TileLayer url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\" />\n\n            { featuresToDisplay.map((f, idx) => {\n              const { outer, inner } = getRadius(f);\n              return (\n                <>\n                  <CircleMarker\n                    key={`${idx}-outer`}\n                    center={f.geometry.coordinates.slice().reverse()}\n                    radius={outer}\n                    pathOptions={STYLE_OUTER} />\n\n                  { selectedMarker && inner > 0 && <CircleMarker \n                      key={`${idx}-inner`} \n                      center={f.geometry.coordinates.slice().reverse()}\n                      radius={inner}\n                      pathOptions={STYLE_INNER}>\n                      <Popup>\n                        <a href={f.properties.geonames_uri}>{f.properties.placename}</a> <br/>\n                        {f.properties.num_works} works\n                      </Popup>\n                    </CircleMarker>\n                  }\n                </>\n              )\n            })}\n          </MapContainer>\n\n          <Legend\n            index={index} \n            selected={selectedMarker}\n            onSelect={marker => setSelectedMarker(marker) }/>\n        </>\n      }\n    </>\n  )\n\n}\n\nexport default Map;","// Cf. https://github.com/davidchin/react-input-range\nimport InputRange from 'react-input-range';\nimport { useState } from 'react';\n\nimport './Timeline.scss';\n\nimport 'react-input-range/lib/css/index.css';\n\nconst Timeline = props => {\n  \n  // Start and end years\n  const min = props.data[0];\n  const max = props.data[props.data.length - 1];\n\n  const [ range, setRange ] = useState({ min, max});\n\n  const getLeftPct = year =>\n    100 * ((year - min) / (max - min))\n\n  const onChange = value => {\n    const sanitized = {\n      min: Math.max(min, value.min),\n      max: Math.min(max, value.max)\n    };\n\n    setRange(sanitized);\n    props.onChange(value);\n  }\n\n  return (\n    <div className=\"t6e-timeline\">\n      <div className=\"t6e-timeline-inner\">\n        <div className=\"t6e-ticks\">\n          { props.data.map(year =>\n            <div key={year} className=\"t6e-tick-wrapper\" style={{ left: `${getLeftPct(year)}%` }}>\n              <div className=\"t6e-tick\" />\n            </div>\n          )}\n        </div>\n        <InputRange\n          draggableTrack\n          minValue={min}\n          maxValue={max}\n          value={range}\n          onChange={onChange} />\n      </div>\n    </div>\n  )\n\n}\n\nexport default Timeline;","/** \n * Returns the list of distinct markers from all \n * works at this feature.\n */\nconst getMarkers = feature =>\n  Array.from(\n    feature.records.reduce((acc, work) => {\n      work.markers.forEach(marker => acc.add(marker));\n      return acc;\n    }, new Set())\n  );\n\nexport default class FeatureIndex {\n\n  constructor(geojson) {\n    const features = geojson.features.filter(f => f?.geometry.type === 'Point');\n\n    // Index features by metadata marker\n    const byMarker = {};\n\n    features.forEach(f => {\n      getMarkers(f).forEach(marker => {\n        const featuresWithMarker = byMarker[marker];\n        if (featuresWithMarker) {\n          featuresWithMarker.push(f);\n        } else {\n          byMarker[marker] = [ f ];\n        }\n      })\n    });\n\n    this._features = features;\n    this._byMarker = byMarker;\n  }\n\n  get features() {\n    return this._features;\n  } \n\n  get markers() {\n    return Object.keys(this._byMarker).slice().sort();\n\n  }\n  \n  /** Returns all features with the given marker **/\n  findByMarker = marker =>\n    this._byMarker[marker];\n\n}","import { useState } from 'react';\nimport useSWR from 'swr';\nimport Map from './map/Map';\nimport Timeline from './timeline/Timeline';\nimport FeatureIndex from './FeatureIndex';\n\nimport './App.css';\n\nconst computeTimeline = data => {\n  const reducer = (acc, feature) => {\n    feature.records.forEach(r => acc.add(r.year));\n    return acc;\n  }\n\n  const years = data.features.reduce(reducer, new Set());\n\n  // To array and sort\n  return [ ...Array.from(years).slice().sort() ];\n}\n\nconst App = () => {\n\n  const { data } = useSWR('map.json', url => fetch(url).then(r => r.json()));\n\n  const [ timerange, setTimerange ] = useState();\n\n  const index = data ? new FeatureIndex(data) : null;\n\n  const onChange = range =>\n    setTimerange(range);\n\n  return (\n    <div className=\"App\">\n      <Map data={data} index={index} timerange={timerange} />\n      { data && \n        <Timeline data={computeTimeline(data)} onChange={onChange} />\n      }\n    </div>\n  );\n\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\nimport L from 'leaflet';\n\n// Fix missing Leaflet marker images\n// Cf. https://github.com/PaulLeCam/react-leaflet/issues/453\ndelete L.Icon.Default.prototype._getIconUrl;\n\nL.Icon.Default.mergeOptions({\n    iconRetinaUrl: 'images/leaflet/marker-icon-2x.png',\n    iconUrl: 'images/leaflet/marker-icon.png',\n    shadowUrl: 'images/leaflet/marker-shadow.png'\n});\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}